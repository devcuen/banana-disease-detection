name: 🍌 Banana Disease Detection CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Manual execution

# Cancel redundant workflows
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

# Minimal permissions
permissions:
  contents: read
  packages: write
  pull-requests: write
  actions: read
  checks: write

jobs:
  test:
    name: 🧪 Test (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Prevent hung jobs
    
    strategy:
      fail-fast: false  # Continue other versions if one fails
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better caching
    
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: '**/requirements*.txt'
    
    - name: 📦 Cache PyTorch models and data
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/torch
          ~/.cache/huggingface
          ./data/samples
          ./models/pretrained
        key: ${{ runner.os }}-pytorch-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pytorch-${{ matrix.python-version }}-
          ${{ runner.os }}-pytorch-
    
    - name: 🔧 Configure OpenMP for PyTorch
      run: |
        echo "KMP_DUPLICATE_LIB_OK=TRUE" >> $GITHUB_ENV
        echo "OMP_NUM_THREADS=2" >> $GITHUB_ENV
        echo "MKL_NUM_THREADS=2" >> $GITHUB_ENV
    
    - name: ⚡ Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        # Install PyTorch CPU version for CI (faster)
        pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist flake8 black isort
    
    - name: 🎯 Download sample images
      run: |
        python -c "
        from src.banana_disease_detection.download_samples import SampleDownloader
        downloader = SampleDownloader()
        downloader.download_all_samples()
        print('✅ Sample images downloaded successfully')
        "
    
    - name: 🧹 Code quality checks
      run: |
        # Format check
        black --check --diff src/ tests/
        # Import sorting check
        isort --check-only --diff src/ tests/
        # Linting
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: 🔬 Run tests with coverage
      run: |
        pytest tests/ \
          --cov=src \
          --cov-report=xml \
          --cov-report=term-missing \
          --cov-fail-under=70 \
          -v \
          -n auto
    
    - name: 🚀 Test demo functionality
      run: |
        python demo.py --sample-analysis --verbose
    
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.python-version }}
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

  build:
    name: 🏗️ Build Package
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      id-token: write  # For trusted publishing
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: 🔧 Configure OpenMP
      run: echo "KMP_DUPLICATE_LIB_OK=TRUE" >> $GITHUB_ENV
    
    - name: 📦 Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine check-manifest
    
    - name: ✅ Check manifest
      run: check-manifest
    
    - name: 🏗️ Build package
      run: python -m build
    
    - name: 🔍 Check built package
      run: python -m twine check dist/*
    
    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
        retention-days: 7

  docker:
    name: 🐳 Build Docker Image
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🔐 Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: 📝 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME }}/banana-disease-detector
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          KMP_DUPLICATE_LIB_OK=TRUE
          OMP_NUM_THREADS=2

  security:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'pull_request'
    
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: 🔍 Install security tools
      run: |
        pip install bandit safety pip-audit
    
    - name: 🛡️ Run security checks
      run: |
        # Check for known vulnerabilities
        safety check --json --output safety-report.json || true
        pip-audit --format=json --output=pip-audit-report.json || true
        # Check for security issues in code
        bandit -r src/ -f json -o bandit-report.json || true
    
    - name: 📤 Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          safety-report.json
          pip-audit-report.json
          bandit-report.json
        retention-days: 7
